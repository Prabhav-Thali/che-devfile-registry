#
# Copyright (c) 2020-2021 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

name: Release Che Devfile Registry

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'release version in format 7.y.z'
        required: true

env:
  IMAGE: quay.io/prabhav/che-devfile-registry

jobs:
  build-images:
    name: Create Che Devfile Registry Release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64,arm64,ppc64le,s390x]
    outputs:
      amd64: ${{ steps.result.outputs.amd64 }}
      arm64: ${{ steps.result.outputs.arm64 }}
      ppc64le: ${{ steps.result.outputs.ppc64le }}
      s390x: ${{ steps.result.outputs.s390x }}
    steps:
      -
        name: "Checkout  source code"
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      -
        name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      -
        name: "Set up Docker Buildx ${{ matrix.arch }}"
        uses: docker/setup-buildx-action@v1
      -
        name: "Docker quay.io Login"
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      -
        name: "Build and push ${{ matrix.arch }}"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/dockerfiles/Dockerfile
          target: registry
          build-args: |
            PATCHED_IMAGES_TAG=${{ github.event.inputs.version }}
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ env.IMAGE }}:${{ github.event.inputs.version }}-${{ matrix.arch }}
      -
        id: result
        name: "Build result outputs version"
        if: ${{ success() }}
        run: echo "::set-output name=${{ matrix.arch }}::${{ github.event.inputs.version }}-${{ matrix.arch }}"

  create-manifest:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      -
        name: "Checkout  source code"
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - 
        name: Prepare
        id: prep
        run: |
          SHORT_SHA1=$(git rev-parse --short HEAD)
          echo ::set-output name=short_sha1::${SHORT_SHA1}
      -
        name: "Docker quay.io Login"
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      -
        name: "Create and push manifest"
        run: |
          AMD64_VERSION="${{ needs['build-images'].outputs.amd64 }}"
          ARM64_VERSION="${{ needs['build-images'].outputs.arm64 }}"
          PPC64LE_VERSION="${{ needs['build-images'].outputs.ppc64le }}"
          S390X_VERSION="${{ needs['build-images'].outputs.s390x }}"
          if [[ -z "$AMD64_VERSION" || \
               -z "$ARM64_VERSION" || \
               -z "$PPC64LE_VERSION" || \
               -z "$S390X_VERSION" ]]; then
            echo "[!] The job 'build-images' fails on some of the architectures. Can't create complete manifest.";
            exit 1;
          fi
          AMEND=""
          AMEND+=" --amend ${{ env.IMAGE }}:$AMD64_VERSION";
          AMEND+=" --amend ${{ env.IMAGE }}:$ARM64_VERSION";
          AMEND+=" --amend ${{ env.IMAGE }}:$PPC64LE_VERSION";
          AMEND+=" --amend ${{ env.IMAGE }}:$S390X_VERSION";
          docker manifest create ${{ env.IMAGE }}:${{ github.event.inputs.version }} $AMEND
          docker manifest push ${{ env.IMAGE }}:${{ github.event.inputs.version }}
          docker manifest create ${{ env.IMAGE }}:${{ steps.prep.outputs.short_sha1 }} $AMEND
          docker manifest push ${{ env.IMAGE }}:${{ steps.prep.outputs.short_sha1 }}
      -
        id: result
        name: "Manifest result"
        if: ${{ success() }}
        run: echo "Manifest was created and pushed successfully"

  tag-release:
    needs: create-manifest
    runs-on: ubuntu-latest
    steps:
      -
        name: "Checkout  source code"
        uses: actions/checkout@v1
        with:
          fetch-depth: 1 
      -
        name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      -
        name: "Set up Docker Buildx ${{ matrix.arch }}"
        uses: docker/setup-buildx-action@v1
      -
        name: "Docker quay.io Login"
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - 
        name: Build/Push patched base images and happy path image and tag release
        run: |
          git config --global user.name "Mykhailo Kuznietsov"
          git config --global user.email "mkuznets@redhat.com"

          export GITHUB_TOKEN=${{ secrets.CHE_BOT_GITHUB_TOKEN }}

          ./make-release.sh --version ${{ github.event.inputs.version}} --tag-release
      - name: Create MM message
        run: |
          echo "{\"text\":\":building_construction: Che Devfile Registry ${{ github.event.inputs.version }} has been released: https://quay.io/eclipse/che-devfile-registry:${{ github.event.inputs.version }}\"}" > mattermost.json
      - name: Send MM message
        uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: eclipse-che-releases
          MATTERMOST_USERNAME: che-bot
